from PyQt5 import QtCore, QtGui, QtWidgets
from Helper.AnalogGaugeWidget import AnalogGaugeWidget
from PyQt5.QtGui import QFont, QFontDatabase, QColor
from PyQt5.QtCore import QTimer, QTime, QDateTime, QTimeZone, QByteArray, Qt
# from PyQt5.QtWebEngineWidgets import QWebEngineView
from PyQt5.QtWidgets import QWidget, QGridLayout, QVBoxLayout

import os
import sys
from sim808_reader import GpsModule
from threading import Thread

folderPath = os.path.dirname(os.path.abspath(__file__))
iconPath = folderPath + "//Icons"
fontPath  = folderPath + "//Fonts"
backGroundImagePath = iconPath + "//background_4.jpg"

alertBatteryIconPath = iconPath + "//alertBattery2.png"
directionIconPath = iconPath + "//directionIcon.png"
clock4IconPath = iconPath + "//clock_4.png"
averageSpeedBackgroundIconPath = iconPath + "//blue.png"

companyNameStr = "HIGHTECHMOBI Bisiklet Teknolojileri LTD.ŞTİ."
brandNameStr = "QuadSmart"

_useMap = False
_useRealData = False

class Ui_MainWindow(object):

    batteryLevel = 15
    
    remainingTimeValue = QTime(0, 5, 20) # 5 minutes 20 seconds
    screenWidth = 1024
    screenHeight = 600
    
    # screenWidth = 480
    # screenHeight = 320
    
    isBlinkStarted = False
    isBatteryBlinkStarted = False
    ledOn = False
    
    batteryIconRaised = False
    
    tripDistanceTotalValue = 0
    avgSpeedValue = 0
    voltageValue = 36
    
    valueFont = QFont()
    headerFont = QFont()
    layout = QGridLayout()

    
    def setupUi(self, MainWindow):
    
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(self.screenWidth, self.screenHeight)
        # MainWindow.showFullScreen()
        MainWindow.setCursor(Qt.CursorShape.BlankCursor)
        
        self.centralwidget = QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.centralwidget.setMouseTracking(False);
        

        myFontName = "RifficFree-Bold"
        myFontsPath = "//riffic"
        fullFontName =  myFontsPath + "//" + myFontName + ".ttf"

        fontId = QFontDatabase.addApplicationFont(fontPath + fullFontName)
        if fontId < 0:
            print('font not loaded')
                        
        families = QtGui.QFontDatabase.applicationFontFamilies(fontId)
        self.valueFont = QFont(families[0])
        self.headerFont = QFont(families[0])
        
        self.headerFont.setPointSize(self.screenWidth // 40)
        self.valueFont.setPointSize(self.screenWidth // 50)
        
        self.background = QtWidgets.QLabel(self.centralwidget)
        self.background.setGeometry(QtCore.QRect(0, 0, self.screenWidth, self.screenHeight))
        self.background.setPixmap(QtGui.QPixmap(backGroundImagePath))
        self.background.setScaledContents(True)
        self.background.setObjectName("background")
                
        if _useMap == True:
            self.mapButton = QtWidgets.QPushButton("Map", self.centralwidget)
            self.mapButton.setGeometry(340, int(self.screenHeight * 0.05), 45, 30) 
            self.mapButton.setFont(headerFont)
            self.mapButton.clicked.connect(self.open_map_gui)
        
            from mapGui import MapWidget            
            self.mapWidget = MapWidget(self.centralwidget)
            self.mapWidget.setGeometry(QtCore.QRect(0, 0, 480, 320))
            self.mapWidget.setObjectName("mapWidget")
            self.mapWidget.setHidden(True)
            
            self.timer = QtCore.QTimer(MainWindow)
            self.timer.timeout.connect(self.update_map)
            self.timer.start(2000)
            
        # self.createLeftSignalWidget()
        # self.createRightSignalWidget()
        
        self.createDateTimeDisplay()
        self.createBatteryWidget()
        self.createBatteryIcon()
        self.createRemainingTimeWidget()
        
        self.createAverageSpeedWidget()
        self.createTripDistanceWidgets()
        
        self.createCompanyNameWidget(myFontName)
        self.createBrandNameLabel(myFontName)
        
        # self.createLEDLabels()
        # self.createVoltageWidget()
        
        self.setupSpeedWidget(myFontName)
        
        # layout.addWidget(self.leftSignal, 0, 0, 1, 1)
        # layout.addWidget(self.rightSignal, 0, 5, 1, 1)
        self.layout.addWidget(self.batteryLevelBar, 0, 0)
        self.layout.addWidget(self.batteryIcon, 0, 2)
        self.layout.addWidget(self.brandName, 0, 6)
        self.layout.addWidget(self.remainingTimeIcon, 2, 6)
        self.layout.addWidget(self.remainingTimeText, 2, 7)
        
        avgSpeedGroup = QVBoxLayout()
        avgSpeedGroup.addWidget(self.averageSpeedHeader)
        avgSpeedGroup.addWidget(self.averageSpeedText)
        
        self.layout.addWidget(self.averageSpeedBackground, 4, 5)
        self.layout.addLayout(avgSpeedGroup, 4, 5)
        
        tripDistanceGroup = QVBoxLayout()
        tripDistanceGroup.addWidget(self.tripDistanceHeader)
        tripDistanceGroup.addWidget(self.tripDistanceText)
        
        self.layout.addWidget(self.tripDistanceBackground, 4, 8)
        self.layout.addLayout(tripDistanceGroup, 4, 8)
        
        self.layout.addWidget(self.dateTimeDisplay, 8, 6, 1, 4)
        self.layout.addWidget(self.companyNameText, 10, 6, 1, 5)


        # self.layout.addWidget(self.led_label1, 5, 1, 1, 1)
        # self.layout.addWidget(self.led_label2, 6, 1, 1, 1)
        # self.layout.addWidget(self.led_label3, 7, 1, 1, 1)
        # self.layout.addWidget(self.led_label4, 8, 1, 1, 1)
        # self.layout.addWidget(self.voltageWidget, 10, 10, 1, 1)
        self.layout.addWidget(self.speedWidget, 4, 10)

        self.centralwidget.setLayout(self.layout) 
    
        MainWindow.setCentralWidget(self.centralwidget)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def setupSpeedWidget(self, myFontName):
        speedWidgetWidth = int(self.screenWidth * 0.40)
        speedWidgetHeight = int(self.screenHeight * 0.40)
        speedWidgetPositionX = int(self.screenWidth * 0.80) 
        speedWidgetPositionY = int((self.screenHeight * 0.5)  - speedWidgetHeight // 2)
        
        self.speedWidget = AnalogGaugeWidget(self.centralwidget)
        # self.speedWidget.setGeometry(QtCore.QRect(speedWidgetPositionX,
        #                                           speedWidgetPositionY,
        #                                           speedWidgetWidth,
        #                                           speedWidgetHeight))
        self.speedWidget.setMaximumSize(speedWidgetWidth, speedWidgetHeight)
        self.speedWidget.setObjectName("speedWidget")
        self.speedWidget.setMaxValue(50)
        self.speedWidget.updateValue(1)
        
        # timer : calculate average speed 
        self.timer = QtCore.QTimer(MainWindow)
        self.timer.timeout.connect(self.calculateAvgSpeed)
        self.timer.start(1000)
        
        # update speed
        self.timer = QtCore.QTimer(MainWindow)
        self.timer.timeout.connect(self.updateSpeed)
        self.timer.start(1000)
        
        self.speedWidget.setBigScaleColor(QColor(255, 255, 255, 255))
        self.speedWidget.setFineScaleColor(QColor(255, 255, 255, 255))
        self.speedWidget.setCustomGaugeTheme(color3="#005d97", color2="#001937", color1="#001928")
        self.speedWidget.setNeedleCenterColor(color3="#004458", color2="#8c3361", color1="#8c5088")  # center of needle
        self.speedWidget.setNeedleColor(255, 255, 255, 255)
        self.speedWidget.setNeedleColorOnDrag(0, 240, 240, 200)
        self.speedWidget.setScaleValueColor(255, 255, 255, 180)
        self.speedWidget.setDisplayValueColor(0, 242, 0, 255)
        
        self.speedWidget.scale_fontsize = 2
        self.speedWidget.value_fontsize = 2
        self.speedWidget.setScalaCount(5) #how many value shown on the scale
        self.speedWidget.setTotalScaleAngleSize(145)
        self.speedWidget.setScaleFontFamily(myFontName)
        self.speedWidget.setValueFontFamily(myFontName)

    def createVoltageWidget(self):
        voltageWidgetWidth = 90
        voltageWidgetHeight = 30
        voltageWidgetPositionX = int((self.screenWidth - voltageWidgetWidth) * 0.04)
        voltageWidgetPositionY = int(self.screenHeight * 0.85)
        
        self.voltageWidget = QtWidgets.QLabel(self.centralwidget)
        # self.voltageWidget.setGeometry(QtCore.QRect(voltageWidgetPositionX, voltageWidgetPositionY, voltageWidgetWidth, voltageWidgetHeight))
        self.voltageWidget.setObjectName("widget")
        self.voltageWidget.setText("voltage : " + str(self.voltageValue) + " V")
        self.voltageWidget.setFont(self.headerFont)
        self.voltageWidget.setStyleSheet("color: white;")

    def createLEDLabels(self):
        led_labels_width = 40
        led_labels_height = 20
        led_labels_position_x = int(self.screenWidth * 0.1)
        led_labels_position_y = int(self.screenHeight * 0.5)
        
        self.led_label1 = QtWidgets.QLabel(self.centralwidget)
        self.led_label1.setGeometry(QtCore.QRect(led_labels_position_x,
                                                 led_labels_position_y,
                                                 led_labels_width,
                                                led_labels_height))
        self.led_label1.setObjectName("led_label1")
        self.led_label1.setStyleSheet("background-color: yellow; border-radius: 10px;")
        
        self.led_label2 = QtWidgets.QLabel(self.centralwidget)
        self.led_label2.setGeometry(QtCore.QRect(led_labels_position_x,
                                                led_labels_position_y + 30,
                                                led_labels_width,
                                                led_labels_height))
        self.led_label2.setObjectName("led_label2")
        self.led_label2.setStyleSheet("background-color: yellow; border-radius: 10px;")
        
        self.led_label3 = QtWidgets.QLabel(self.centralwidget)
        self.led_label3.setGeometry(QtCore.QRect(led_labels_position_x,
                                                 led_labels_position_y + 60,
                                                 led_labels_width,
                                                 led_labels_height))
        self.led_label3.setObjectName("led_label3")
        self.led_label3.setStyleSheet("background-color: yellow; border-radius: 10px;")
        
        self.led_label4 = QtWidgets.QLabel(self.centralwidget)
        self.led_label4.setGeometry(QtCore.QRect(led_labels_position_x,
                                                 led_labels_position_y + 90,
                                                 led_labels_width,
                                                 led_labels_height))
        self.led_label4.setObjectName("led_label4")
        self.led_label4.setStyleSheet("background-color: yellow; border-radius: 10px;")
                
        self.timer = QtCore.QTimer(MainWindow)
        self.timer.timeout.connect(lambda: self.blinkLed(self.led_label1))
        self.timer.start(500)
        
        self.timer = QtCore.QTimer(MainWindow)
        self.timer.timeout.connect(lambda: self.blinkLed(self.led_label2))
        self.timer.start(500)
        
        self.timer = QtCore.QTimer(MainWindow)
        self.timer.timeout.connect(lambda: self.blinkLed(self.led_label3))
        self.timer.start(500)
        
        self.timer = QtCore.QTimer(MainWindow)
        self.timer.timeout.connect(lambda: self.blinkLed(self.led_label4))
        self.timer.start(500)

    def createBrandNameLabel(self, myFontName):
        brandNameFont = QFont()
        brandNameFont.setFamily(myFontName)
        brandNameFont.setPointSize(13)
        
        brandNameTextWidth = int(self.screenWidth * 0.2)
        brandNameTextHeight = int(self.screenHeight * 0.05)
        brandNameTextPositionX = int(self.screenWidth * 0.5 - brandNameTextWidth * 0.5)
        brandNameTextPositionY = int(self.screenHeight * 0.05)
        
        self.brandName = QtWidgets.QLabel(self.centralwidget)
        self.brandName.setMaximumSize(brandNameTextWidth, brandNameTextHeight)
        self.brandName.setFont(self.valueFont)
        self.brandName.setObjectName("brandName")
        self.brandName.setText(brandNameStr)
        self.brandName.setStyleSheet("color: #DDDDDD;")

    def createCompanyNameWidget(self, myFontName):
        companyNameFont = QFont()
        companyNameFont.setFamily(myFontName)
        companyNameFont.setPointSize(self.screenWidth // 80)
        
        companyNameTextWidth = int(self.screenWidth * 0.5)
        companyNameTextHeight = int(self.screenHeight * 0.05)
        
        self.companyNameText = QtWidgets.QLabel(self.centralwidget)
        self.companyNameText.setMaximumSize(companyNameTextWidth, companyNameTextHeight)
        self.companyNameText.setFont(companyNameFont)
        self.companyNameText.setObjectName("companyName")
        self.companyNameText.setText(companyNameStr)
        self.companyNameText.setStyleSheet("color: #DDDDDD;")

    def createTripDistanceWidgets(self):
        tripDistanceBackgroundWidth = int(self.screenWidth * 0.2)
        tripDistanceBackgroundHeight = tripDistanceBackgroundWidth
        
        tripDistanceHeaderWidth = int(self.screenWidth * 0.2)
        tripDistanceHeaderHeight = int(self.screenHeight * 0.05)
        
        tripDistanceTextWidth = int(self.screenWidth * 0.2)
        tripDistanceTextHeight = int(self.screenHeight * 0.05)
        
        self.tripDistanceBackground = QtWidgets.QLabel(self.centralwidget)
        self.tripDistanceBackground.setMaximumSize(tripDistanceBackgroundWidth, tripDistanceBackgroundHeight)
        self.tripDistanceBackground.setPixmap(QtGui.QPixmap(averageSpeedBackgroundIconPath))
        self.tripDistanceBackground.setObjectName("tripDistanceBackground")
        self.tripDistanceBackground.setScaledContents(True)
        
        print(self.headerFont.pixelSize())
        print(self.headerFont.pointSize())
        
        self.tripDistanceHeader = QtWidgets.QLabel(self.centralwidget)
        self.tripDistanceHeader.setMaximumSize(tripDistanceHeaderWidth, tripDistanceHeaderHeight)
        self.tripDistanceHeader.setFont(self.headerFont)
        self.tripDistanceHeader.setObjectName("tripDistanceTitle")
        self.tripDistanceHeader.setText("Yolculuk")
        self.tripDistanceHeader.setStyleSheet("color: white;")
        
        self.tripDistanceText = QtWidgets.QLabel(self.centralwidget)
        self.tripDistanceText.setMaximumSize(tripDistanceTextWidth, tripDistanceTextHeight)
        self.tripDistanceText.setFont(self.valueFont)
        self.tripDistanceText.setObjectName("tripDistance")
        self.tripDistanceText.setText(str(self.tripDistanceTotalValue)  + " km")
        self.tripDistanceText.setStyleSheet("color: white;")
        
        # update trip distance every 1 second
        self.timer = QtCore.QTimer(MainWindow)
        self.timer.timeout.connect(self.updateTripDistance)
        self.timer.start(1000)

    def createAverageSpeedWidget(self):
        averageSpeedBackgroundWidth = int(self.screenWidth * 0.2)
        averageSpeedBackgroundHeight = averageSpeedBackgroundWidth
        
        averageSpeedHeaderWidth = int(self.screenWidth * 0.2)
        averageSpeedHeaderHeight = int(self.screenHeight * 0.05)
        
        averageSpeedTextWidth = int(self.screenWidth * 0.2)
        averageSpeedTextHeight = int(self.screenHeight * 0.05)
        
        self.averageSpeedBackground = QtWidgets.QLabel(self.centralwidget)
        self.averageSpeedBackground.setMaximumSize(averageSpeedBackgroundWidth, averageSpeedBackgroundHeight)
        self.averageSpeedBackground.setObjectName("averageSpeedBackground")
        pixmap = QtGui.QPixmap(averageSpeedBackgroundIconPath)
        scaled_pixmap = pixmap.scaled(averageSpeedBackgroundWidth, averageSpeedBackgroundHeight, QtCore.Qt.AspectRatioMode.KeepAspectRatio)
        self.averageSpeedBackground.setPixmap(scaled_pixmap)
        self.averageSpeedBackground.setScaledContents(True)
        
        self.averageSpeedHeader = QtWidgets.QLabel(self.centralwidget)
        # self.averageSpeedHeader.setMaximumSize(averageSpeedHeaderWidth, averageSpeedHeaderHeight)
        self.averageSpeedHeader.setObjectName("averageSpeed")
        self.averageSpeedHeader.setText("Ort Hız")
        self.averageSpeedHeader.setFont(self.headerFont)
        self.averageSpeedHeader.setStyleSheet("color: white;")
        
        self.averageSpeedText = QtWidgets.QLabel(self.centralwidget)
        # self.averageSpeedText.setMaximumSize(averageSpeedTextWidth, averageSpeedTextHeight)
        self.averageSpeedText.setObjectName("averageSpeed")
        self.averageSpeedText.setText(str(self.avgSpeedValue))
        self.averageSpeedText.setFont(self.valueFont)
        self.averageSpeedText.setStyleSheet("color: white;")
        

    def createRemainingTimeWidget(self):
        remainingTimeTextWidth = int(self.screenWidth * 0.2)
        remainingTimeTextHeight = int(self.screenHeight * 0.2)
        
        remainingTimeIconWidth = int(self.screenWidth * 0.1)
        remainingTimeIconHeight = remainingTimeIconWidth
        # remainingTimeIconPositionX = int(self.screenWidth * 0.5 - remainingTimeTextWidth // 2 - 25)
        # remainingTimeIconPositionY = int(self.screenHeight * 0.2)
        
        self.remainingTimeIcon = QtWidgets.QLabel(self.centralwidget)
        self.remainingTimeIcon.setMaximumSize(remainingTimeIconWidth, remainingTimeIconHeight)
        self.remainingTimeIcon.setPixmap(QtGui.QPixmap(clock4IconPath))
        self.remainingTimeIcon.setScaledContents(True)
        self.remainingTimeIcon.setObjectName("remainingTimeIcon")
        self.remainingTimeIcon.setStyleSheet("color: white;")
        
        # remainingTimeTextPositionX = remainingTimeIconPositionX + 50
        # remainingTimeTextPositionY = remainingTimeIconPositionY + 10
        
        self.remainingTimeText = QtWidgets.QLabel(self.centralwidget)
        self.remainingTimeText.setMaximumSize(remainingTimeTextWidth, remainingTimeTextHeight)
        self.remainingTimeText.setFont(self.valueFont)
        self.remainingTimeText.setObjectName("remainingTime")
        self.remainingTimeText.setText(self.remainingTimeValue.toString("mm:ss"))
        self.remainingTimeText.setStyleSheet("color: white;")
        
        self.timer = QtCore.QTimer(MainWindow)
        self.timer.timeout.connect(self.updateRemainingTime)
        self.timer.start(1000)

    def createBatteryIcon(self):
        batteryIconWidth = int(self.screenWidth * 0.1)
        batteryIconHeight = batteryIconWidth
        # batteryIconPositionX = int(batteryLevelBarPositionX)
        # batteryIconPositionY = int(batteryLevelBarPositionY) - 40
        
        self.batteryIcon = QtWidgets.QLabel(self.centralwidget)
        self.batteryIcon.setMaximumSize(batteryIconWidth, batteryIconHeight)
        self.batteryIcon.setFont(self.valueFont)
        self.batteryIcon.setPixmap(QtGui.QPixmap(alertBatteryIconPath))
        self.batteryIcon.setScaledContents(True)
        self.batteryIcon.setObjectName("batteryIcon")
        self.batteryIcon.setHidden(True)

    def createBatteryWidget(self):
        self.timer = QtCore.QTimer(MainWindow)
        self.timer.timeout.connect(self.updateBattery)
        self.timer.start(15000)
        
        batteryLevelBarWidth = int(self.screenWidth * 0.1)
        batteryLevelHeight = int(self.screenHeight * 0.05)
        # batteryLevelBarPositionX = int(self.screenWidth * 0.05)
        # batteryLevelBarPositionY = int(self.screenHeight * 0.2)
        
        self.batteryLevelBar = QtWidgets.QProgressBar(self.centralwidget)
        self.batteryLevelBar.setMaximumSize(batteryLevelBarWidth, batteryLevelHeight)
        self.batteryLevelBar.setProperty("value", self.batteryLevel)
        self.batteryLevelBar.setTextVisible(True)
        self.batteryLevelBar.setObjectName("progressBar")
        self.batteryLevelBar.setStyleSheet(
            "QProgressBar {"
            "   border: 2px solid #2196F3;"
            "   border-radius: 5px;"
            "   background-color: white;"
            "   text-align: center;"
            "}"
            "QProgressBar::chunk {"
            "   background-color: #00f200;"
            "   width: 10px; "
            "   margin: 0.5px;"
            "}"
            "QProgressBar::text {"
            "   color: white;"
            "   font-size: 12px;"
            "   font-weight: bold;"
            "}"
        )

    def createDateTimeDisplay(self):
        dateTimeHeight = int(self.screenHeight * 0.05)
        dateTimeWidth = int(self.screenWidth * 0.5)
        dateTimePositionX = int((self.screenWidth - dateTimeWidth) // 2)
        dateTimePositionY = int(self.screenHeight * 0.80)

        self.dateTimeDisplay = QtWidgets.QLabel(self.centralwidget)
        self.dateTimeDisplay.setMaximumSize(dateTimeWidth, dateTimeHeight)
        self.dateTimeDisplay.setFont(self.valueFont)
        self.dateTimeDisplay.setObjectName("dateTimeDisplay")
        self.dateTimeDisplay.setStyleSheet("color: white;")
        
        self.timer = QtCore.QTimer(MainWindow)
        self.timer.timeout.connect(self.updateDateTime)
        self.timer.start(1000)  # Update every 1000 milliseconds (1 second)
        
    def createLeftSignalWidget(self):
        leftSignalPositionX = self.screenWidth * 0.05
        leftSignalPositionY = self.screenHeight * 0.05
        leftSignalWidth = int(self.screenWidth * 0.07)
        leftSignalHeight = leftSignalWidth
         
        self.leftSignal = QtWidgets.QLabel(self.centralwidget)
        # self.leftSignal.setGeometry(QtCore.QRect(int(leftSignalPositionX), int(leftSignalPositionY), leftSignalWidth, leftSignalHeight))
        pixmap = QtGui.QPixmap(directionIconPath)
        transform = QtGui.QTransform().rotate(180)
        rotated_pixmap = pixmap.transformed(transform, QtCore.Qt.TransformationMode.SmoothTransformation)
        self.leftSignal.setPixmap(rotated_pixmap)
        self.leftSignal.setMaximumSize(leftSignalWidth, leftSignalHeight)
        self.leftSignal.setScaledContents(True)
        self.leftSignal.setObjectName("leftSignal")
        
        self.leftSignal.setHidden(True)
        
        self.timer = QTimer(MainWindow)
        self.timer.timeout.connect(self.blinkLeftSignalEveryHalfSecond)
        self.timer.start(500)
        
    def createRightSignalWidget(self):
        rightSignalPositionX = self.screenWidth * 0.90
        rightSignalPositionY = self.screenHeight * 0.05
        rightSignalWidth = int(self.screenWidth * 0.07)
        rightSignalHeight = rightSignalWidth
        
        self.rightSignal = QtWidgets.QLabel(self.centralwidget)
        self.rightSignal.setPixmap(QtGui.QPixmap(directionIconPath))
        self.rightSignal.setMaximumSize(rightSignalWidth, rightSignalHeight)
        self.rightSignal.setScaledContents(True)
        self.rightSignal.setObjectName("rightSignal")
        
        self.rightSignal.setHidden(True)

        
        self.timer = QtCore.QTimer(MainWindow)
        self.timer.timeout.connect(self.blinkRightSignalEveryHalfSecond)
        self.timer.start(500)

    def open_map_gui(self):
        
        if (self.mapWidget.isHidden() == False):
            self.mapWidget.setHidden(True)
            self.mapButton.setText("Map")
            return
        
        self.mapWidget.setHidden(False)
        # get map widget front of all widgets
        self.mapWidget.raise_()
        self.mapButton.raise_()
        self.mapButton.setText("Close")
        
    def update_map(self):
        self.mapWidget.update_map(float(GpsModule().get_latitude()), float(GpsModule().get_longitude()))

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.batteryLevelBar.setFormat(_translate("MainWindow", "%p%"))
        
    def updateSpeed(self):
        # Update the speed
        # if (self.speedWidget.value < 25):
        #     self.speedWidget.updateValue(self.speedWidget.value + 1)
        
        self.speedWidget.updateValue(float(GpsModule().get_speed()))
        
    def updateDateTime(self):
        # Update the QDateTimeEdit with the current date and time
        iana_id_bytes = QByteArray(b"Europe/Istanbul")

        # Get the current UTC date and time
        current_utc_datetime = QDateTime.currentDateTimeUtc()

        # Set the time zone to Turkey
        turkey_time_zone = QTimeZone(iana_id_bytes)
        current_turkey_datetime = QDateTime(current_utc_datetime)
        current_turkey_datetime.setTimeZone(turkey_time_zone)

        # self.dateTimeDisplay.setText(str(QDate.currentDate().toString("d/M/yyyy")) + " " + str(QTime.currentTime().toString("h:mm AP")))
        self.dateTimeDisplay.setText(current_turkey_datetime.toString("d/M/yyyy h:mm AP"))
  
    def updateBattery(self):
        # Update the battery level
        self.batteryLevel = getBatteryLevel(self.batteryLevel)
        self.batteryLevelBar.setValue(self.batteryLevel)
        
        if (self.batteryLevel < 25 and self.isBatteryBlinkStarted == False):
            self.isBatteryBlinkStarted = True
            self.blinkBattery()
        
        if (self.batteryLevel < 1):
            exit()
            
    def blinkBattery(self):
        # create time 0,5 seconds
        self.timer = QtCore.QTimer(MainWindow)
        self.timer.timeout.connect(self.blinkBatteryEveryHalfSecond)
        self.timer.start(500)
        
    def blinkBatteryEveryHalfSecond(self):
        if (self.batteryIcon.Raised == False):
            self.batteryIcon.raise_()
        else :
            self.batteryIcon.lower()
            
        
    def updateRemainingTime(self):
        # Update the remaining time
        self.remainingTimeValue = self.remainingTimeValue.addSecs(-1)
        self.remainingTimeText.setText(self.remainingTimeValue.toString("mm:ss"))
        
        # if (self.remainingTimeValue < QTime(0, 5, 0) and self.isBlinkStarted == False):
        #     self.isBlinkStarted = True
        #     self.blinkRemainingTime()

    def blinkRemainingTime(self):
        # create time 0,5 seconds
        self.timer = QtCore.QTimer(MainWindow)
        self.timer.timeout.connect(self.blinkRemainingTimeEveryHalfSecond)
        self.timer.start(500)
            
    def blinkRemainingTimeEveryHalfSecond(self):
        if (self.remainingTimeIcon.isHidden() == True):
            self.remainingTimeIcon.setHidden(False)
            self.remainingTimeText.setHidden(False)
        else :
            self.remainingTimeIcon.setHidden(True) 
            self.remainingTimeText.setHidden(True)  
        
    def updateTripDistance(self):
        # calculate trip distance using speed
        currentSpeed = self.speedWidget.value
        self.tripDistanceTotalValue = self.tripDistanceTotalValue + (((currentSpeed) / 60) / 60)
        self.tripDistanceText.setText(str(round(self.tripDistanceTotalValue, 1)) + " km")
        
    def blinkLeftSignalEveryHalfSecond(self):
        if (self.leftSignal.isHidden() == True):
            self.leftSignal.setHidden(False)
        else :
            self.leftSignal.setHidden(True)
            
    def blinkRightSignalEveryHalfSecond(self):
        if (self.rightSignal.isHidden() == True):
            self.rightSignal.setHidden(False)
        else :
            self.rightSignal.setHidden(True)
    
    def calculateAvgSpeed(self):
        currentSpeed = self.speedWidget.value
        self.avgSpeedValue = (self.avgSpeedValue + currentSpeed) / 2
        self.averageSpeedText.setText(str(round(self.avgSpeedValue, 1)))
        
    def blinkLed(self, led):
        if (led.isEnabled() == True):
            led.setStyleSheet("background-color: yellow; border-radius: 10px;")
            led.setEnabled(False)
        else:
            led.setStyleSheet("background-color: black; border-radius: 10px;")
            led.setEnabled(True)
   
def getBatteryLevel(batteryLevel):
    # first get battery level 
    # use dummy value for now
    # decrement battery level by 1
    return batteryLevel - 1

def run_gps_module():
    gps_instance = GpsModule()  # Instantiate a new instance of GpsModule
    gps_instance.run_sim808(_useRealData)

if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("Usage: python script.py <arg1> <arg2>")
        print("arg1: _useRealData, arg2: _useMap")
        sys.exit(1)
    
    _useRealData = sys.argv[1].lower() == 'true'
    _useMap = sys.argv[2].lower() == 'true'
    
    app = QtWidgets.QApplication(sys.argv)
    
    gps_thread = Thread(target=run_gps_module)
    gps_thread.daemon = True
    gps_thread.start()
    
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
